/*
Package http GENERATED BY gengo:runtimedoc 
DON'T EDIT THIS FILE
*/
package http

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v Do) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Method":
			return []string{
				"http method",
			}, true
		case "Url":
			return []string{
				"http request url",
			}, true
		case "Header":
			return []string{
				"http headers",
			}, true
		case "Query":
			return []string{
				"http query",
			}, true
		case "RequestBody":
			return []string{
				"http request body",
			}, true
		case "With":
			return []string{}, true
		case "Result":
			return []string{}, true

		}

		return nil, false
	}
	return []string{
		"Do http request",
	}, true
}

func (v DoOption) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Header":
			return []string{
				"header keys for result",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v Fetch) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Url":
			return []string{
				"http request url",
			}, true
		case "HitBy":
			return []string{
				"hit by response header",
			}, true
		case "WrittenFileResult":
			return []string{
				"downloaded file",
			}, true

		}
		if doc, ok := runtimeDoc(v.WrittenFileResult, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Fetch http resource to local cache",
	}, true
}

func (v ResponseResult) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Result":
			return []string{}, true
		case "Status":
			return []string{
				"status code",
			}, true
		case "Header":
			return []string{
				"response header, only pick headers requests by `with.header`",
			}, true
		case "Data":
			return []string{
				"auto unmarshal based on content-type",
			}, true

		}
		if doc, ok := runtimeDoc(v.Result, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"ResponseResult ok when status code >= 200 < 300",
	}, true
}
