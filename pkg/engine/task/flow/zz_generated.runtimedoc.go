/*
Package flow GENERATED BY gengo:runtimedoc 
DON'T EDIT THIS FILE
*/
package flow

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v Every) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Group":
			return []string{}, true
		case "Steps":
			return []string{
				"do the step one by one",
			}, true
		case "Condition":
			return []string{
				"result values of steps",
			}, true

		}
		if doc, ok := runtimeDoc(v.Group, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Every task group",
	}, true
}

func (v Some) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Group":
			return []string{}, true
		case "Steps":
			return []string{
				"do the step one by one",
			}, true
		case "Condition":
			return []string{
				"result values of steps",
			}, true

		}
		if doc, ok := runtimeDoc(v.Group, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"Some task group",
	}, true
}

func (v StepInterface) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Ok":
			return []string{}, true
		case "Values":
			return []string{}, true

		}

		return nil, false
	}
	return []string{
		"StepInterface",
		"support additional fields but must the `result: Result` as result checking",
	}, true
}
